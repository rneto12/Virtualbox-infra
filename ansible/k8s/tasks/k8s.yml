---
- name: Set hostname
  hostname:
    name: k8s-server

- name: Install packages that allow apt to be used over HTTPS
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg
    - lsb-release
    - software-properties-common

- name: Add an apt signing key for Docker
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add apt repository for stable version
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
    state: present

- name: Install docker and its dependecies
  apt: 
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - docker-ce 
    - docker-ce-cli 
    - containerd.io
  notify:
    - docker status

- name: Configure docker daemon
  lineinfile:
    path: /etc/docker/daemon.json
    create: yes
    line: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "100m"
       },
      "storage-driver": "overlay2"
      }

- name: Add ubuntu user to docker group
  user:
    name: ubuntu
    group: docker

- name: Docker services
  shell: |
    systemctl enable docker
    systemctl daemon-reload
    systemctl restart docker

- name: Remove swapfile from /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none

- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Add an apt signing key for Kubernetes
  apt_key:
    url: "{{ item }}"
    state: present
  loop: "{{ aptkeys }}"
  vars:
    aptkeys:
      - https://packages.cloud.google.com/apt/doc/apt-key.gpg
      - https://baltocdn.com/helm/signing.asc

- name: Adding apt repository for Kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list

- name: modules
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    create: yes
    line: |
      br_netfilter

- name: modules
  blockinfile:
    path: /etc/sysctl.d/k8s.conf
    create: yes
    marker: ""
    block: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1

- name: Adding apt repository for Helm
  apt_repository:
    repo: deb https://baltocdn.com/helm/stable/debian/ all main
    state: present
    filename: helm.list

- name: Install Kubernetes binaries and helm
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
      - kubelet=1.20.10-00
      - kubeadm=1.20.10-00
      - kubectl=1.20.10-00
      - helm

- name: Configure node ip
  lineinfile:
    path: /etc/default/kubelet
    create: yes
    line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

- name: Restart kubelet
  service:
    name: kubelet
    daemon_reload: yes
    state: restarted

- name: Initialize the Kubernetes cluster using kubeadm
  command: kubeadm init --apiserver-advertise-address={{ node_ip }} --node-name k8s-server --pod-network-cidr=10.23.0.0/16

- name: Setup kubeconfig for ubuntu user
  command: "{{ item }}"
  with_items:
   - mkdir -p /home/ubuntu/.kube
   - cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
   - chown ubuntu:ubuntu /home/ubuntu/.kube/config

- name: Setup kubeconfig for root
  shell: |
    [ ! -d /root/.kube ] && mkdir -p /root/.kube
    cp -i /etc/kubernetes/admin.conf /root/.kube/config

- name: Setup kubeconfig for root
  shell: |
    sleep 80
    echo "export KUBECONFIG=/etc/kubernetes/admin.conf" >> /root/.profile
    echo "source <(kubectl completion bash)" >> /root/.bashrc
    echo "source <(kubectl completion bash)" >> /home/ubuntu/.bashrc

- name: Install calico pod network
  shell: |
    export KUBECONFIG=/etc/kubernetes/admin.conf
    kubectl create -f https://docs.projectcalico.org/manifests/calico.yaml
    kubectl taint node k8s-server node-role.kubernetes.io/master:NoSchedule-
    sleep 15

- name: Reboot
  reboot:
    msg: "Rebooted by Ansible"
    connect_timeout: 10
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: whoami


